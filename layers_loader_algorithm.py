# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LayersLoader
                                 A QGIS plugin
 Load all possible layers recursively
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-17
        copyright            : (C) 2022 by DevActif
        email                : info@devactif.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'DevActif'
__date__ = '2022-10-17'
__copyright__ = '(C) 2022 by DevActif'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (
    QgsProcessingAlgorithm,
    QgsProcessingParameterFile,
    QgsProcessingOutputMultipleLayers,
    QgsProcessingContext,
    QgsProcessingParameterCrs,
    QgsRasterLayer,
    QgsVectorLayer
)
from .services.layerService import extractLayerName, countFiles, chooseFileFromLayerName


class LayersLoaderAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    CRS = 'CRS'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT,
                self.tr('Input folder'),
                behavior=1
            )
        )

        self.addParameter(
            QgsProcessingParameterCrs(
                self.CRS,
                self.tr('layers CRS')
            )
        )

        self.addOutput(
            QgsProcessingOutputMultipleLayers(
                self.OUTPUT,
                self.tr("Imported Layers")
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        folder = self.parameterAsFile(parameters, self.INPUT, context)
        crs = self.parameterAsCrs(parameters, self.CRS, context)

        totalFileCount = countFiles(folder)
        feedback.pushInfo(
            "there is {} files in the folder {}".format(totalFileCount, folder))
        feedback.setProgressText("Trying to load each layer...")

        outputLayers = {}
        fileCount = 0
        for root, dirs, files in os.walk(folder):
            for file_ in files:
                if feedback.isCanceled():
                    return False
                feedback.setProgress(fileCount/totalFileCount * 100)
                fileCount += 1

                path = os.path.join(root, file_)
                layerName = extractLayerName(path)
                pathFile = chooseFileFromLayerName(layerName)

                layer = QgsRasterLayer(path, layerName)
                # if layer jpg or any raster extension:
                #    layer = QgsRasterLayer(path, layerName)
                # if layer has vector extension
                #    layer = QgsVectorLayer(path, layerName) 

                if not layer.isValid():
                    layer = QgsVectorLayer(path, layerName)

                if layer.isValid():
                    layer.setCrs(crs)
                
                outputLayers[layerName] = layer

        feedback.pushInfo(
            "there is {} valid layers".format(len(outputLayers)))

        for name, layer in outputLayers.items():
            context.temporaryLayerStore().addMapLayer(layer)
            context.addLayerToLoadOnCompletion(
                layer.id(), QgsProcessingContext.LayerDetails(name=name, project=context.project()))

        return {self.OUTPUT: outputLayers}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Layers Loader'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return LayersLoaderAlgorithm()

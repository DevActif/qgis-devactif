# -*- coding: utf-8 -*-

"""
/***************************************************************************
 OpenWor
                                 A QGIS plugin
 Read a .wor file to set coordinate system and load all layer in folder
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-05
        copyright            : (C) 2022 by DevActif
        email                : info@devactif.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'DevActif'
__date__ = '2022-10-05'
__copyright__ = '(C) 2022 by DevActif'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (
    QgsProcessingAlgorithm,
    QgsProcessingParameterFile,
    QgsProcessingOutputMultipleLayers,
    QgsCoordinateReferenceSystem,
    QgsProject,
    QgsProcessingException,
    QgsProcessingContext
)
from .services.loadLayersService import createLayers, extractLayerName
from .config.app import RASTER, VECTOR
from .services.fileListService import getFilesToLoad
from .services.epsgIdExtractorService import extractEpsgId
from .services.worReaderService import readCrsFromWor


class OpenWorAlgorithm(QgsProcessingAlgorithm):
    """
    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'Input'
    OUTPUT = "Output"

    crs = QgsCoordinateReferenceSystem()

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT,
                self.tr('MapInfo Workspace file'),
                extension="wor"
            )
        )

        self.addOutput(
            QgsProcessingOutputMultipleLayers(
                self.OUTPUT,
                self.tr("Imported Layers")
            )
        )

    def prepareAlgorithm(self, parameters, context, feedback):
        worFile = self.parameterAsFile(parameters, self.INPUT, context)

        coordsysList = readCrsFromWor(worFile, feedback)
        epsgId = extractEpsgId(coordsysList, feedback)

        if(not epsgId):
            return False

        self.crs.createFromOgcWmsCrs(epsgId)

        if(not self.crs.isValid()):
            raise QgsProcessingException("The crs is not valid")

        return True

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        feedback.setProgress(0)
        feedback.setProgressText("Changing CRS and ellipsoid")

        self.originalCRS = context.project().crs()
        self.originalEllipsoid = context.project().ellipsoid()

        context.project().setCrs(self.crs, True)

        feedback.pushInfo("original CRS is {}".format(self.originalCRS))
        feedback.pushInfo("CRS is now {}".format(QgsProject.instance().crs()))
        feedback.pushInfo(
            "original ellipsoid is {}".format(self.originalEllipsoid))
        feedback.pushInfo("Ellipsoid is now {}".format(
            QgsProject.instance().ellipsoid()))

        feedback.setProgressText("Listing files to load")

        worFile = self.parameterAsFile(parameters, self.INPUT, context)
        folder = os.path.dirname(worFile)

        rasterToLoad = getFilesToLoad(folder, RASTER, feedback)
        vectorToLoad = getFilesToLoad(folder, VECTOR, feedback)

        if feedback.isCanceled():
            self.resetCrs(context)
            return False

        feedback.setProgressText("Creating layers")

        numLayers = len(rasterToLoad) + len(vectorToLoad)

        if numLayers == 0:
            feedback.pushError(
                "There are no files to load from the base directory")
            return False

        outputLayers = list()

        outputLayers = createLayers(
            rasterToLoad, outputLayers, self.crs, feedback, RASTER, numLayers)

        outputLayers = createLayers(vectorToLoad, outputLayers, self.crs, feedback, VECTOR, numLayers, step=len(
            rasterToLoad))

        feedback.pushInfo("{} layers found".format(len(outputLayers)))

        if feedback.isCanceled():
            self.resetCrs(context)
            return False

        context.project().addMapLayers(outputLayers)

        # for name, layer in outputLayers.items():
        #     feedback.pushDebugInfo("layer name is {}".format(name))
        #     feedback.pushDebugInfo("layer is {}".format(layer))
        #     feedback.pushDebugInfo("layer id is {}".format(layer.id()))
        #     context.addLayerToLoadOnCompletion(
        #         layer.id(), QgsProcessingContext.LayerDetails(name=name, project=context.project()))

        return {self.OUTPUT: outputLayers}

    def resetCrs(self, context):
        context.project().setCrs(self.originalCRS)
        context.project().setEllipsoid(self.originalEllipsoid)

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'openwor'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Open Wor")

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return OpenWorAlgorithm()
